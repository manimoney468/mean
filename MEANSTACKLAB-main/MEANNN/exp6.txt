// npm install express
// npm install express --save
// npm install body-parser --save
// npm install cookie-parser --save

// npm install express
// npm install express --save
// npm install body-parser --save
// npm install cookie-parser --save

const mongoose = require("mongoose");

mongoose.set("strictQuery", false);

mongoose.connect("mongodb://127.0.0.1:27017/demo")
  .then(() => console.log("Database connected"))
  .catch((error) => console.log(error));


// collect.js
// Require the mongoose library
const mongoose = require("mongoose");

// Set mongoose to use non-strict mode for queries
mongoose.set("strictQuery", false);

// Connect to the MongoDB database named "demo"
mongoose.connect("mongodb://127.0.0.1:27017/demo")
  .then(() => console.log("Database connected"))
  .catch((err) => console.log("Error"));

// Define a schema for the "demo1" collection
const demoSchema = mongoose.Schema({
  name: String,
  ID: Number,
  address: String
});

// Create a model named "CustomerData" based on the schema
const CustomerData = mongoose.model("demo1", demoSchema);

// Log a message indicating that the collection schema has been created
console.log("Collection schema created");






//insert
var mongoose = require("mongoose");
mongoose.set("strictQuery", false);

mongoose.connect("mongodb://127.0.0.1:27017/demo")
  .then(() => console.log("Database connected"))
  .catch((error) => console.log("Error"));

const demoSchema = mongoose.Schema({
  name: String,
  ID: Number,
  address: String
});

const CustomerData = mongoose.model("demo1", demoSchema);

console.log("Collection schema created");

const c1 = new CustomerData({
  name: "Anand",
  ID: 101, // Changed to a number instead of a string
  address: "vijayawada"
});

const c2 = new CustomerData({
  name: "jaahnavi",
  ID: 102, // Changed to a number instead of a string
  address: "gudivada"
});

const c3 = new CustomerData({
  name: "priya",
  ID: 103, // Changed to a number instead of a string
  address: "guntur"
});

const c4 = new CustomerData({
  name: "Sai",
  ID: 104, // Changed to a number instead of a string
  address: "vijayawada"
});

const c5 = new CustomerData({
  name: "AnandSai",
  ID: 105, // Changed to a number instead of a string
  address: "vizag"
});

c1.save();
c2.save();
c3.save();
c4.save();
c5.save();

console.log("Data Inserted successfully");



// retrecval
var mongoose=require("mongoose"); 
mongoose.set("strictQuery",false); 
mongoose.connect("mongodb://127.0.0.1:27017/demo") 
.then(() =>console.log("Database connected")) 
.catch((Error) =>console.log("Error")); 
const demo123=mongoose.Schema({ 
name:String, 
ID:Number, 
address:String, 
}); 
const CustomerData=mongoose.model("demo1",demo123); 
 
const CustomerDisplay=async () => { 
const r=await CustomerData.find(); 
/* CustomerData.find({name:'RAMESH'}); 
for single filed retrival */ 
console.log(r); 
}; 
CustomerDisplay();




//update


var mongoose=require("mongoose"); 
mongoose.set("strictQuery",false); 
mongoose.connect("mongodb://127.0.0.1:27017/demo") 
.then(() =>console.log("Database connected")) 
.catch((Error) =>console.log("Error")); 
const demo123=mongoose.Schema({ 
name:String, 
ID:Number, 
address:String, 
}); 
const CustomerData=mongoose.model("demo1",demo123); 
const CustomerDisplay=async () => { 
const result=await CustomerData.updateOne( 
{ name:"ramya" },{ $set: { ID:105 } } 
); 
console.log(result); 
}; 
CustomerDisplay(); 




//Delete



// Require the mongoose library
const mongoose = require("mongoose");

// Set mongoose to use non-strict mode for queries
mongoose.set("strictQuery", false);

// Connect to the MongoDB database named "demo"
mongoose.connect("mongodb://127.0.0.1:27017/demo")
  .then(() => console.log("Database connected"))
  .catch((Error) => console.log("Error"));

// Define a schema for the "demo1" collection
const demoSchema = mongoose.Schema({
  name: String,
  ID: Number,
  address: String
});

// Create a model named "CustomerData" based on the schema
const CustomerData = mongoose.model("demo1", demoSchema);

// Define an asynchronous function to delete documents from the collection
const CustomerDisplay = async () => {
  // Delete documents where the ID is equal to 102
  const result = await CustomerData.deleteOne({ ID: 102 });
  // Log the result of the operation to the console
  console.log(result);
};

// Call the function to execute the deletion operation
CustomerDisplay();


